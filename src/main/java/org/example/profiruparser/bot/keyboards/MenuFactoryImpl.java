package org.example.profiruparser.bot.keyboards;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.bot.constants.TextConstants;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class MenuFactoryImpl implements MenuFactory {

    @Value("${app.subscription.monthly.price}")
    private String monthlyPrice;

    @Value("${app.subscription.yearly.price}")
    private String yearlyPrice;

    @Value("${currencySecond}")
    private String currencySecond;

    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;

    @Override
    public SendMessage createWelcomeMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                + TextConstants.START_TEXT.getText()
                + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        );

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"));
        row1.add(new KeyboardButton("üîë –í–æ–π—Ç–∏"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"));    /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
        row2.add(new KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"));      /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/

        KeyboardRow row3 = new KeyboardRow();
        row2.add(new KeyboardButton("üè† –°—Ç–∞—Ä—Ç"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

    @Override
    public SendMessage createMainMenu(Long chatId) {
        return createMainMenu(chatId, false); /* –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å —Ñ–ª–∞–≥–æ–º false*/
    }

    /* –ù–û–í–´–ô –ü–ï–†–ï–ì–†–£–ñ–ï–ù–ù–´–ô –ú–ï–¢–û–î*/
    public SendMessage createMainMenu(Long chatId, boolean afterSearch) {
        User user = userService.findByTelegramChatId(chatId);
        String status = "";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());

        /* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –æ –≤—ã—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞*/
        if (!afterSearch) {
            status = user != null ? getSubscriptionStatus(user.getUsername()) : "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";
            message.setText("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n" + status + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            message.setParseMode("Markdown");
        } else {
            /* –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ*/
            /*message.setText("*–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...*");*/
            message.setText("*‚åõ*");
            message.setParseMode("Markdown");
        }

        /* –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô*/
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫"));
        row1.add(new KeyboardButton("‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º"));
        row2.add(new KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫"));
        row3.add(new KeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"));
        row4.add(new KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));

        KeyboardRow row5 = new KeyboardRow();
        row5.add(new KeyboardButton("‚ùå –í—ã–π—Ç–∏"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);
        rows.add(row5);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

    @Override
    public SendMessage createSubscriptionMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üí≥ *–í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" +
                "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n" +
                "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º\n" +
                "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–∏\n\n" +
                "*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" +
                " –≤—Ç–µ—á–µ–Ω–∏–µ 59 —Å–µ–∫—É–Ω–¥!*");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();

       /* row1.add(new KeyboardButton("1 –º–µ—Å—è—Ü - 299‚ÇΩ"));*/ /* –º–µ–Ω—è–µ–º –Ω–∞ @Value*/
        row1.add(new KeyboardButton("1 –º–µ—Å—è—Ü - " + this.monthlyPrice + this.currencySecond));

        KeyboardRow row2 = new KeyboardRow();

        /*row2.add(new KeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ"));*/ /* –º–µ–Ω—è–µ–º –Ω–∞ @Value*/
        row2.add(new KeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - " + this.yearlyPrice + this.currencySecond));

        /*KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"));*/  /* –ø–æ–∫–∞  —É–±–∏—Ä–∞–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã*/

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        /*rows.add(row4);*/
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

    @Override
    public SendMessage createKeywordsMenu(Long chatId, List<String> keywords) {
        StringBuilder text = new StringBuilder("‚öôÔ∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n\n");
        for (int i = 0; i < 5; i++) {
            String keyword = keywords.get(i);
            text.append(i + 1).append(". ").append(keyword.isEmpty() ? "–Ω–µ –∑–∞–¥–∞–Ω" : keyword).append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text.toString());
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 1"));
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 2"));
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 3"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 4"));
        row2.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 5"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º"));
        row3.add(new KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

    /*private String getSubscriptionStatus(String username) {
        if (username == null) return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";

        LocalDateTime endDate = subscriptionService.getSubscriptionEndDate(username);
        if (endDate == null) return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";

        if (endDate.isAfter(LocalDateTime.now())) {
            return "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: " +
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
        } else {
            return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: " +
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
        }
    }
*/

    private String getSubscriptionStatus(String username) {
        return subscriptionService.getSubscriptionStatus(username); /* ‚Üê –í–û–¢ –¢–ê–ö*/
    }

    @Override
    public SendMessage createInfoMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n" +
                "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ...\n\n" +
                TextConstants.INFO_TEXT.getText());
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

    @Override
    public SendMessage createContactsMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*\n\n" +
                TextConstants.CONTACTS_TEXT.getText());
        /*message.setParseMode("Markdown");*/

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        return message;
    }

}
