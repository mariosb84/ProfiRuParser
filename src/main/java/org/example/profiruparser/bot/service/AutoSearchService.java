package org.example.profiruparser.bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

@Slf4j
@Service
@RequiredArgsConstructor
public class AutoSearchService {

    private final SearchService searchService;
    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;
    private final TelegramService telegramService;
    private final UserStateManager stateManager;

    private final ScheduledExecutorService scheduler = java.util.concurrent.Executors.newScheduledThreadPool(1);
    private final Map<Long, ScheduledFuture<?>> scheduledTasks = new ConcurrentHashMap<>();

    public void handleAutoSearchCommand(Long chatId) {
        stateManager.setUserState(chatId, UserStateManager.STATE_AUTO_SEARCH);
        sendAutoSearchMenuWithStatus(chatId);
    }

    public void handleEnableAutoSearch(Long chatId) {
        stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_INTERVAL);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞*\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –¥–ª—è 1 —á–∞—Å–∞)\n" +
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("30 –º–∏–Ω"));
        row1.add(new KeyboardButton("60 –º–∏–Ω"));
        row1.add(new KeyboardButton("120 –º–∏–Ω"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        telegramService.sendMessage(message);
    }

    public void handleIntervalInput(Long chatId, String text) {
        try {
            int interval;

            /* –ï–°–õ–ò –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê 30/60/120 –ú–ò–ù*/
            if (text.equals("30 –º–∏–Ω") || text.equals("60 –º–∏–Ω") || text.equals("120 –º–∏–Ω")) {
                interval = Integer.parseInt(text.replace(" –º–∏–Ω", ""));
            } else {
                /* –ï–°–õ–ò –í–í–ï–î–ï–ù–û –ß–ò–°–õ–û –í–†–£–ß–ù–£–Æ*/
                interval = Integer.parseInt(text);
            }

            if (interval < 5) {
                telegramService.sendMessage(chatId, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 5 –º–∏–Ω—É—Ç");
                return;
            }
            if (interval > 1440) {
                telegramService.sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç)");
                return;
            }

            startAutoSearch(chatId, interval);
            stateManager.setUserState(chatId, UserStateManager.STATE_AUTO_SEARCH);
            telegramService.sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω! –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ " + interval + " –º–∏–Ω—É—Ç");
            sendAutoSearchMenuWithStatus(chatId);

        } catch (NumberFormatException e) {
            telegramService.sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö):");
        }
    }

    public void handleDisableAutoSearch(Long chatId) {
        stopAutoSearch(chatId);
        stateManager.setUserState(chatId, UserStateManager.STATE_AUTO_SEARCH);
        telegramService.sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
        sendAutoSearchMenuWithStatus(chatId);
    }

    private void startAutoSearch(Long chatId, int intervalMinutes) {
        stopAutoSearch(chatId);

        User user = userService.findByTelegramChatId(chatId);
        if (user == null || !subscriptionService.isSubscriptionActive(user.getUsername())) {
            telegramService.sendMessage(chatId, "‚ùå –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞");
            return;
        }

        final String username = user.getUsername();

        /* –ò–ó–ú–ï–ù–ï–ù–ò–ï: delay = intervalMinutes, period = intervalMinutes
         –¢–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ intervalMinutes, –∞ –Ω–µ —Å—Ä–∞–∑—É*/
        ScheduledFuture<?> future = scheduler.scheduleAtFixedRate(() -> {
            try {
                if (!subscriptionService.isSubscriptionActive(username)) {
                    telegramService.sendMessage(chatId, "‚ùå –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞");
                    stopAutoSearch(chatId);
                    return;
                }

                searchService.searchByKeywords(chatId);

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–µ: {}", e.getMessage());
            }
        }, intervalMinutes, intervalMinutes, TimeUnit.MINUTES); /* ‚Üê delay = intervalMinutes*/

        scheduledTasks.put(chatId, future);
        stateManager.setUserInterval(chatId, intervalMinutes);
    }

    private void stopAutoSearch(Long chatId) {
        ScheduledFuture<?> future = scheduledTasks.get(chatId);
        if (future != null) {
            future.cancel(false);
            scheduledTasks.remove(chatId);
        }
        stateManager.removeUserInterval(chatId);
    }

    public void sendAutoSearchMenuWithStatus(Long chatId) {
        boolean isAutoSearchRunning = scheduledTasks.containsKey(chatId);
        Integer currentInterval = stateManager.getUserInterval(chatId);

        String status;
        if (isAutoSearchRunning && currentInterval != null) {
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: " + currentInterval + " –º–∏–Ω.)";
        } else {
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω";
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞*\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + status +
                "\n\n–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        if (isAutoSearchRunning) {
            row1.add(new KeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫"));
        } else {
            row1.add(new KeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫"));
        }

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("30 –º–∏–Ω"));
        row2.add(new KeyboardButton("60 –º–∏–Ω"));
        row2.add(new KeyboardButton("120 –º–∏–Ω"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        telegramService.sendMessage(message);
    }

    public void shutdown() {
        scheduler.shutdown();
        scheduledTasks.values().forEach(future -> future.cancel(false));
    }

    public void handleIntervalButton(Long chatId, String text) {
        boolean isAutoSearchRunning = scheduledTasks.containsKey(chatId);

        if (!isAutoSearchRunning) {
            /* –ï–°–õ–ò –ê–í–¢–û–ü–û–ò–°–ö –í–´–ö–õ–Æ–ß–ï–ù - –ü–†–ï–î–õ–ê–ì–ê–ï–ú –í–ö–õ–Æ–ß–ò–¢–¨*/
            telegramService.sendMessage(chatId, "‚ùå –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω. –ù–∞–∂–º–∏—Ç–µ 'üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
            return;
        }

        /* –ï–°–õ–ò –ê–í–¢–û–ü–û–ò–°–ö –í–ö–õ–Æ–ß–ï–ù - –ú–ï–ù–Ø–ï–ú –ò–ù–¢–ï–†–í–ê–õ*/
        int interval = Integer.parseInt(text.replace(" –º–∏–Ω", ""));

        /* –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–¢–ê–†–´–ô –ò –ó–ê–ü–£–°–ö–ê–ï–ú –° –ù–û–í–´–ú –ò–ù–¢–ï–†–í–ê–õ–û–ú*/
        stopAutoSearch(chatId);
        startAutoSearch(chatId, interval);

        telegramService.sendMessage(chatId, "‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ " + interval + " –º–∏–Ω—É—Ç");
        sendAutoSearchMenuWithStatus(chatId);
    }

}