package org.example.profiruparser.bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.bot.keyboards.MenuFactory;
import org.example.profiruparser.domain.dto.SignInRequest;
import org.example.profiruparser.domain.dto.SignUpRequest;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.service.AuthenticationService;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@Slf4j
@Service
@RequiredArgsConstructor
public class AuthService {

    @Value("${app.trial.period-days:7}") /* ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£*/
    private int trialPeriodDays;

    private final AuthenticationService authenticationService;
    private final UserServiceData userService;
    private final UserStateManager stateManager;
    private final TelegramService telegramService;
    private final MenuFactory menuFactory;

    private final SubscriptionService subscriptionService;

    public void handleLoginCommand(Long chatId) {
        stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_USERNAME);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
    }

    public void handleRegisterCommand(Long chatId) {
        stateManager.setUserState(chatId, UserStateManager.STATE_REGISTER_USERNAME);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω:");
    }

    public void handleUsernameInput(Long chatId, String username, boolean isRegistration) {
        if (username.length() < 3) {
            telegramService.sendMessage(chatId, "‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:");
            return;
        }

        if (isRegistration && userService.findUserByUsername(username) != null) {
            telegramService.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:");
            return;
        }

        stateManager.setTempUsername(chatId, username);
        String nextState = isRegistration ? UserStateManager.STATE_REGISTER_PASSWORD : UserStateManager.STATE_WAITING_PASSWORD;
        stateManager.setUserState(chatId, nextState);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
    }

    public void handlePasswordInput(Long chatId, String password, boolean isRegistration) {
        String username = stateManager.getTempUsername(chatId);
        stateManager.removeTempUsername(chatId);

        if (isRegistration) {
            handleRegistrationAndAutoLogin(chatId, username, password); /* –ò–ó–ú–ï–ù–ï–ù–û*/
        } else {
            handleLogin(chatId, username, password);
        }
    }

    /* –ù–û–í–´–ô –ú–ï–¢–û–î: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*/
    private void handleRegistrationAndAutoLogin(Long chatId, String username, String password) {
        SignUpRequest request = new SignUpRequest();
        request.setUsername(username);
        request.setPassword(password);

        if (authenticationService.signUp(request).isPresent()) {

            /* –ê–ö–¢–ò–í–ò–†–£–ï–ú –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î*/
            subscriptionService.activateTrialSubscription(username);

            SignInRequest loginRequest = new SignInRequest();
            loginRequest.setUsername(username);
            loginRequest.setPassword(password);

            Optional<User> user = authenticationService.signIn(loginRequest);
            if (user.isPresent()) {
                userService.updateTelegramChatId(username, chatId);
                stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
                telegramService.sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã!");

                telegramService.sendMessage(chatId, "üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ " + trialPeriodDays + " –¥–Ω–µ–π!");

                /* –ê–°–ò–ù–•–†–û–ù–ù–û –° –ó–ê–î–ï–†–ñ–ö–û–ô*/
                CompletableFuture.delayedExecutor(500, TimeUnit.MILLISECONDS)
                        .execute(() -> {
                            telegramService.sendMessage(menuFactory.createMainMenu(chatId));
                        });
            } else {
                telegramService.sendMessage(chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login");
                stateManager.removeUserState(chatId);
            }
        } else {
            telegramService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
            stateManager.removeUserState(chatId);
        }
    }

    private void handleLogin(Long chatId, String username, String password) {
        SignInRequest request = new SignInRequest();
        request.setUsername(username);
        request.setPassword(password);

        Optional<User> user = authenticationService.signIn(request);
        if (user.isPresent()) {
            userService.updateTelegramChatId(username, chatId);
            stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
            telegramService.sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
            telegramService.sendMessage(menuFactory.createMainMenu(chatId));
        } else {
            telegramService.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. /login");
            stateManager.removeUserState(chatId);
        }
    }

    public void handleLogout(Long chatId) {
        stateManager.clearUserData(chatId);
        telegramService.sendMessage(chatId, "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ : /start");
    }

}
