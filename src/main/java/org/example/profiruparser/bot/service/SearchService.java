package org.example.profiruparser.bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.domain.dto.ProfiOrder;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.parser.service.ProfiParserService;
import org.example.profiruparser.responder.ProfiResponder;
import org.example.profiruparser.service.SeenOrderService;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class SearchService {

    @Value("${orderUrl}")
    private String orderUrl ;

    private final ProfiParserService parser;
    private final ProfiResponder responder;
    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;
    private final TelegramService telegramService;
    private final UserStateManager stateManager;
    private final SeenOrderService seenOrderService; // –î–û–ë–ê–í–õ–Ø–ï–ú

    private final ExecutorService executor = Executors.newFixedThreadPool(4);

    public void handleManualSearch(Long chatId, String query) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) return;

        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            telegramService.sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        executor.submit(() -> {
            try {
                telegramService.sendMessage(chatId, "üîç –ò–¥–µ—Ç –ø–æ–∏—Å–∫...");
                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                List<ProfiOrder> orders = parser.parseOrders(query);

                /* –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã*/
                List<ProfiOrder> newOrders = filterNewOrders(user.getId(), orders);

                if (newOrders.isEmpty()) {
                    telegramService.sendMessage(chatId, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    telegramService.sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + newOrders.size() + " –∑–∞–∫–∞–∑–æ–≤");

                    /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ*/
                    seenOrderService.markOrdersAsSeen(user.getId(),
                            newOrders.stream().map(ProfiOrder::getId).collect(Collectors.toList()));

                    newOrders.forEach(order -> sendOrderCard(chatId, order));
                }
            } catch (Exception e) {
                telegramService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
            }
        });
    }

    public void searchByKeywords(Long chatId) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            telegramService.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            telegramService.sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        List<String> keywords = stateManager.getUserKeywords(chatId);
        if (keywords == null || keywords.stream().allMatch(k -> k == null || k.trim().isEmpty())) {
            telegramService.sendMessage(chatId, "‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
            return;
        }

        List<String> activeKeywords = keywords.stream()
                .filter(k -> k != null && !k.trim().isEmpty())
                .toList();

        executor.submit(() -> {
            try {
                telegramService.sendMessage(chatId, "üöÄ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ " + activeKeywords.size() + " –∫–ª—é—á–∞–º...");

                /* –ü–ï–°–û–ß–ù–´–ï –ß–ê–°–´ –° MARKDOWN*/
                SendMessage hourglassMessage = SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("*‚åõ*")
                        .parseMode("Markdown")
                        .build();
                telegramService.sendMessage(hourglassMessage);

                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                LinkedHashSet<ProfiOrder> allOrders = new LinkedHashSet<>();

                for (String keyword : activeKeywords) {
                    allOrders.addAll(parser.parseOrders(keyword));
                    Thread.sleep(1000);
                }

                /* –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã*/
                List<ProfiOrder> newOrders = filterNewOrders(user.getId(), allOrders.stream().toList());

                if (newOrders.isEmpty()) {
                    telegramService.sendMessage(chatId, "‚ùå –ü–æ –∫–ª—é—á–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    telegramService.sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + newOrders.size() + " –∑–∞–∫–∞–∑–æ–≤");

                    /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ*/
                    seenOrderService.markOrdersAsSeen(user.getId(),
                            newOrders.stream().map(ProfiOrder::getId).collect(Collectors.toList()));

                    newOrders.forEach(order -> sendOrderCard(chatId, order));
                }
            } catch (Exception e) {
                telegramService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
            }
        });
    }

    /* –ù–û–í–´–ô –ú–ï–¢–û–î: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤*/
    private List<ProfiOrder> filterNewOrders(Long userId, List<ProfiOrder> orders) {
        Set<String> seenOrderIds = seenOrderService.getSeenOrderIds(userId);

        return orders.stream()
                .filter(order -> !seenOrderIds.contains(order.getId()))
                .collect(Collectors.toList());
    }

    private void sendOrderCard(Long chatId, ProfiOrder order) {
        /*String orderUrl = "https://profi.ru/backoffice/n.php?o=" + order.getId();*/ /* –º–µ–Ω—è–µ–º –Ω–∞ @Value*/
        String orderUrl = this.orderUrl + order.getId();

        String text = String.format(
                "üÜî –ó–∞–∫–∞–∑ #%s\nüìå %s\nüí∞ %s\nüìÖ %s\nüìù %s\n\n‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –æ—Ç–∫–ª–∏–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å," +
                        " —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Profi.ru –≤ –±—Ä–∞—É–∑–µ—Ä–µ! –õ–∏–±–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.*",
                order.getId(), order.getTitle(), order.getPrice(), order.getCreationTime(),
                order.getDescription().length() > 1000 ?
                        order.getDescription().substring(0, 1000) + "..." : order.getDescription()
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üì± –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")
                                .url(orderUrl)
                                .build()
                )
        ));

        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(markup)
                .parseMode("Markdown")  /* –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞*/
                .build();

        telegramService.sendMessage(message);
    }

    public boolean handleRespondToOrder(Long chatId, String orderId) {
        try {
            User user = userService.findByTelegramChatId(chatId);
            if (user == null) {
                log.error("User not found for chatId: {}", chatId);
                return false;
            }

            WebDriver driver = parser.getDriver();
            if (driver == null) {
                log.error("No active driver available");
                return false;
            }

            boolean success = responder.respondToOrder(driver, orderId, "–•–æ—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑!");
            return success;
        } catch (Exception e) {
            log.error("Error responding to order: {}", e.getMessage());
            return false;
        }
    }

}
