package org.example.profiruparser.bot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.domain.dto.ProfiOrder;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.service.ProfiParser;
import org.example.profiruparser.service.ProfiResponder;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Slf4j
@Service
@RequiredArgsConstructor
public class SearchService {

    private final ProfiParser parser;
    private final ProfiResponder responder;
    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;
    private final TelegramService telegramService;
    private final UserStateManager stateManager;

    private final ExecutorService executor = Executors.newFixedThreadPool(4);

    public void handleManualSearch(Long chatId, String query) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) return;

        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            telegramService.sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        executor.submit(() -> {
            try {
                telegramService.sendMessage(chatId, "üîç –ò–¥–µ—Ç –ø–æ–∏—Å–∫...");
                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                List<ProfiOrder> orders = parser.parseOrders(query);

                if (orders.isEmpty()) {
                    telegramService.sendMessage(chatId, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    telegramService.sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + orders.size() + " –∑–∞–∫–∞–∑–æ–≤");
                    orders.forEach(order -> sendOrderCard(chatId, order));
                }
            } catch (Exception e) {
                telegramService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
            }
        });
    }

    public void searchByKeywords(Long chatId) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            telegramService.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            telegramService.sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        List<String> keywords = stateManager.getUserKeywords(chatId);
        if (keywords == null || keywords.stream().allMatch(k -> k == null || k.trim().isEmpty())) {
            telegramService.sendMessage(chatId, "‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
            return;
        }

        List<String> activeKeywords = keywords.stream()
                .filter(k -> k != null && !k.trim().isEmpty())
                .toList();

        executor.submit(() -> {
            try {
                telegramService.sendMessage(chatId, "üöÄ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ " + activeKeywords.size() + " –∫–ª—é—á–∞–º...");
                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                LinkedHashSet<ProfiOrder> allOrders = new LinkedHashSet<>();

                for (String keyword : activeKeywords) {
                    allOrders.addAll(parser.parseOrders(keyword));
                    Thread.sleep(1000);
                }

                if (allOrders.isEmpty()) {
                    telegramService.sendMessage(chatId, "‚ùå –ü–æ –∫–ª—é—á–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    telegramService.sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + allOrders.size() + " –∑–∞–∫–∞–∑–æ–≤");
                    allOrders.forEach(order -> sendOrderCard(chatId, order));
                }
            } catch (Exception e) {
                telegramService.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
            }
        });
    }

    private void sendOrderCard(Long chatId, ProfiOrder order) {
        String text = String.format(
                "üÜî –ó–∞–∫–∞–∑ #%s\nüìå %s\nüí∞ %s\nüìÖ %s\nüìù %s",
                order.getId(), order.getTitle(), order.getPrice(), order.getCreationTime(),
                order.getDescription().length() > 1000 ?
                        order.getDescription().substring(0, 1000) + "..." : order.getDescription()
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(InlineKeyboardButton.builder()
                        .text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")
                        .callbackData("respond_" + order.getId())
                        .build())
        ));

        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(markup)
                .build();


        // –î–û–ë–ê–í–¨ –≠–¢–£ –ü–ê–£–ó–£
        try {
            Thread.sleep(300); // 300ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return;
        }

        telegramService.sendMessage(message);
    }

        public boolean handleRespondToOrder(String orderId) {
        try {
            boolean success = responder.respondToOrder(orderId, "–•–æ—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑!");
            return success;
        } catch (Exception e) {
            log.error("Error responding to order: {}", e.getMessage());
            return false;
        }
    }

}

