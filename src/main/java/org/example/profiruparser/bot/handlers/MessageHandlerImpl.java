package org.example.profiruparser.bot.handlers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.profiruparser.bot.keyboards.MenuFactory;
import org.example.profiruparser.bot.service.*;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.parser.service.ProfiParserService;
import org.example.profiruparser.service.SubscriptionService;
import org.example.profiruparser.service.UserServiceData;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class MessageHandlerImpl implements MessageHandler {

    private final AuthService authService;
    private final SearchService searchService;
    private final KeywordService keywordService;
    private final AutoSearchService autoSearchService;
    private final PaymentHandler paymentHandler;
    private final UserStateManager stateManager;
    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;
    private final TelegramService telegramService;
    private final MenuFactory menuFactory;
    private final ProfiParserService parser;

    @Override
    public void handleTextMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        String userState = stateManager.getUserState(chatId);

        log.debug("Handling message - ChatId: {}, Text: {}, State: {}", chatId, text, userState);

        try {
            /* –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞*/
            if (handleInputStates(chatId, text, userState)) {
                return;
            }

            /* –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥*/
            handleCommand(chatId, text);

        } catch (Exception e) {
            log.error("Error handling message: {}", e.getMessage());
            telegramService.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    private boolean handleInputStates(Long chatId, String text, String userState) {
        /* –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ - –†–ê–ë–û–¢–ê–Æ–¢ –í –õ–Æ–ë–û–ú –°–û–°–¢–û–Ø–ù–ò–ò*/
        if (text.equals("/start") || text.equals("üè† –°—Ç–∞—Ä—Ç")) {
            handleStartCommand(chatId);
            return true;
        }

        /* –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ - –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–Æ–¢ –í –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–ù–Æ*/
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            /* –í–û–ó–í–†–ê–©–ê–ï–ú –í –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ï–ù–Æ –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò*/
            if (isUserAuthorized(chatId)) {
                sendMainMenu(chatId);
                stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
            } else {
                sendWelcomeMenu(chatId);
                stateManager.setUserState(chatId, UserStateManager.STATE_NONE);
            }
            return true;
        }

        /* –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• –ö–ù–û–ü–û–ö –ú–ï–ù–Æ –í–û –í–†–ï–ú–Ø –í–í–û–î–ê –ü–û–ò–°–ö–û–í–û–ì–û –ó–ê–ü–†–û–°–ê*/
        if (userState.equals(UserStateManager.STATE_WAITING_SEARCH_QUERY)) {
            if (isMenuCommand(text)) {
                telegramService.sendMessage(chatId,
                        /*"‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã");*/
                          "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –¥–ª—è –æ—Ç–º–µ–Ω—ã");
                return true;
            }
        }

        /* –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• –ö–ù–û–ü–û–ö –ú–ï–ù–Æ –í–û –í–†–ï–ú–Ø –í–í–û–î–ê –î–ê–ù–ù–´–• –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò*/
        if (userState.equals(UserStateManager.STATE_WAITING_USERNAME) ||
                userState.equals(UserStateManager.STATE_WAITING_PASSWORD) ||
                userState.equals(UserStateManager.STATE_REGISTER_USERNAME) ||
                userState.equals(UserStateManager.STATE_REGISTER_PASSWORD)) {

            /* –°–ü–ò–°–û–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• –ö–ù–û–ü–û–ö –í–û –í–†–ï–ú–Ø –í–í–û–î–ê*/
            if (text.equals("üîë –í–æ–π—Ç–∏") ||
                    text.equals("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è") ||
                    text.equals("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") ||      /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                    text.equals("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")) {        /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/

                telegramService.sendMessage(chatId, "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö");
                return true;
            }
        }

        if (text.equals( "‚ùå –í—ã–π—Ç–∏" )) {
                authService.handleLogout(chatId);
                return true;
            }

        /* –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í - –†–ê–ë–û–¢–ê–Æ–¢ –í –õ–Æ–ë–û–ú –°–û–°–¢–û–Ø–ù–ò–ò –í–í–û–î–ê*/
        if (userState.startsWith("WAITING_FOR_KEYWORD_")) {
            /* –ï–°–õ–ò –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ï–ï*/
            if (text.startsWith("‚úèÔ∏è –ö–ª—é—á ") || text.equals("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ") || text.equals("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º")) {
                /* –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –í–í–û–î–ê*/
                stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_KEYWORDS);
                /* –ü–ï–†–ï–î–ê–ï–ú –£–ü–†–ê–í–õ–ï–ù–ò–ï –í handleAuthorizedCommand*/
                handleAuthorizedCommand(chatId, text);
                return true;
            }

            /* –ï–°–õ–ò –≠–¢–û –¢–ï–ö–°–¢ –î–õ–Ø –í–í–û–î–ê –ö–õ–Æ–ß–ê - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú*/
            try {
                keywordService.handleKeywordInput(chatId, text);
                List<String> keywords = keywordService.getKeywordsForDisplay(chatId);
                telegramService.sendMessage(menuFactory.createKeywordsMenu(chatId, keywords));
                return true;
            } catch (Exception e) {
                telegramService.sendMessage(chatId, e.getMessage());
                return true;
            }
        }

        /* –û–°–¢–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –í–í–û–î–ê*/
        switch (userState) {
            case UserStateManager.STATE_WAITING_PAYMENT_ID:
                paymentHandler.handlePaymentCheck(chatId, text);
                stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
                return true;

            case UserStateManager.STATE_WAITING_USERNAME:
                authService.handleUsernameInput(chatId, text, false);
                return true;

            case UserStateManager.STATE_WAITING_PASSWORD:
                authService.handlePasswordInput(chatId, text, false);
                return true;

            case UserStateManager.STATE_REGISTER_USERNAME:
                authService.handleUsernameInput(chatId, text, true);
                return true;

            case UserStateManager.STATE_REGISTER_PASSWORD:
                authService.handlePasswordInput(chatId, text, true);
                return true;

            case UserStateManager.STATE_WAITING_INTERVAL:
                autoSearchService.handleIntervalInput(chatId, text);
                return true;

            case UserStateManager.STATE_WAITING_SEARCH_QUERY:
                stateManager.setTempSearchQuery(chatId, text);
                stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_SEARCH_CONFIRMATION);

                SendMessage confirmMessage = new SendMessage();
                confirmMessage.setChatId(chatId.toString());
                confirmMessage.setText("üîç *–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:*\n\"`" + text + "`\"\n\n–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?");
                confirmMessage.setParseMode("Markdown");

                ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
                keyboard.setResizeKeyboard(true);
                List<KeyboardRow> rows = new ArrayList<>();

                KeyboardRow row1 = new KeyboardRow();
                row1.add(new KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"));
                row1.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"));

                rows.add(row1);
                keyboard.setKeyboard(rows);
                confirmMessage.setReplyMarkup(keyboard);

                telegramService.sendMessage(confirmMessage);
                return true;

            case UserStateManager.STATE_WAITING_SEARCH_CONFIRMATION:
                if (text.equals("‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")) {
                    String searchQuery = stateManager.getTempSearchQuery(chatId);
                    searchService.handleManualSearch(chatId, searchQuery);
                    stateManager.removeTempSearchQuery(chatId);
                    stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
                    sendMainMenu(chatId);
                } else if (text.equals("‚ùå –û—Ç–º–µ–Ω–∞")) {
                    telegramService.sendMessage(chatId, "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω");
                    stateManager.removeTempSearchQuery(chatId);
                    stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_MAIN);
                    sendMainMenu(chatId);
                }
                return true;

            default:
                return false;
        }
    }

    private void handleCommand(Long chatId, String text) {
        /* –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–û–ú–ê–ù–î–£ –°–¢–ê–†–¢ –í–ù–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –°–û–°–¢–û–Ø–ù–ò–Ø*/
        if (text.equals("/start") || text.equals("üè† –°—Ç–∞—Ä—Ç")) {
            handleStartCommand(chatId);
            return;
        }

        switch (text) {
            case "/register", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                authService.handleRegisterCommand(chatId);
                break;
            case "/login", "üîë –í–æ–π—Ç–∏":
                authService.handleLoginCommand(chatId);
                break;

            case "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":                    /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                sendInfoMenu(chatId);
                break;
            case "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":                     /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                sendContactsMenu(chatId);
                break;

            case "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
                handleCheckPaymentCommand(chatId);
                break;
            default:
                handleAuthorizedCommand(chatId, text);
        }
    }

    private void handleStartCommand(Long chatId) {
        stateManager.clearUserData(chatId);
        /*paymentHandler.checkAutoPayment(chatId);*/  /* –£–ë–ò–†–ê–ï–ú –ü–û–ö–ê –≠–¢–û–¢ –ú–ï–¢–û–î –ü–†–ò –°–¢–ê–†–¢–ï*/

        if (isUserAuthorized(chatId)) {
            sendMainMenu(chatId);
        } else {
            sendWelcomeMenu(chatId);
        }
    }

    private void handleAuthorizedCommand(Long chatId, String text) {
        if (!isUserAuthorized(chatId)) {
            telegramService.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /login");
            return;
        }

        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            telegramService.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        String userState = stateManager.getUserState(chatId);

        /* –ï–°–õ–ò –ù–ï –ö–û–ú–ê–ù–î–ê –ú–ï–ù–Æ –ò –ú–´ –í –°–û–°–¢–û–Ø–ù–ò–ò –í–í–û–î–ê –ü–û–ò–°–ö–ê - –≠–¢–û –ü–û–ò–°–ö–û–í–´–ô –ó–ê–ü–†–û–°*/
        if (!isMenuCommand(text) && UserStateManager.STATE_WAITING_SEARCH_QUERY.equals(userState)) {
            /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*/
            stateManager.setTempSearchQuery(chatId, text);
            stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_SEARCH_CONFIRMATION);

            SendMessage confirmMessage = new SendMessage();
            confirmMessage.setChatId(chatId.toString());
            confirmMessage.setText("üîç *–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É:*\n\"`" + text + "`\"\n\n–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?");
            confirmMessage.setParseMode("Markdown");

            ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
            keyboard.setResizeKeyboard(true);
            List<KeyboardRow> rows = new ArrayList<>();

            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"));
            row1.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"));

            rows.add(row1);
            keyboard.setKeyboard(rows);
            confirmMessage.setReplyMarkup(keyboard);

            telegramService.sendMessage(confirmMessage);
            return;
        }

        /* –ï–°–õ–ò –ù–ï –ö–û–ú–ê–ù–î–ê –ú–ï–ù–Æ –ò –ú–´ –í –ì–õ–ê–í–ù–û–ú –ú–ï–ù–Æ - –≠–¢–û –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê*/
        if (!isMenuCommand(text) && UserStateManager.STATE_AUTHORIZED_MAIN.equals(userState)) {
            telegramService.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
            return;
        }

        /* –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π*/
        if (!subscriptionService.isSubscriptionActive(user.getUsername()) && !isFreeCommand(text)) {
            telegramService.sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            sendSubscriptionMenu(chatId);
            return;
        }

        switch (text) {
            case "üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫":
                stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_SEARCH_QUERY);
                telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
                break;
            case "‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
                stateManager.setUserState(chatId, UserStateManager.STATE_AUTHORIZED_KEYWORDS);
                List<String> keywords = keywordService.getKeywordsForDisplay(chatId);
                telegramService.sendMessage(menuFactory.createKeywordsMenu(chatId, keywords));
                break;
            case "üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º":
                searchService.searchByKeywords(chatId);
                break;
            case "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
                sendSubscriptionMenu(chatId);
                break;
            case "1 –º–µ—Å—è—Ü - 299‚ÇΩ":
                paymentHandler.handleSubscriptionPayment(chatId, "MONTHLY");
                break;
            case "12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ":
                paymentHandler.handleSubscriptionPayment(chatId, "YEARLY");
                break;
            case "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ":
                keywordService.clearAllKeywords(chatId);
                List<String> clearedKeywords = keywordService.getKeywordsForDisplay(chatId);
                telegramService.sendMessage(menuFactory.createKeywordsMenu(chatId, clearedKeywords));
                break;
            case "üîô –ù–∞–∑–∞–¥":
                sendMainMenu(chatId);
                break;
            case "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                sendMainMenu(chatId);
                break;

            case "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":                    /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                sendInfoMenu(chatId);
                break;
            case "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":                     /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                sendContactsMenu(chatId);
                break;

            case "‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫":
                autoSearchService.handleAutoSearchCommand(chatId);
                break;
            case "üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫":
                autoSearchService.handleEnableAutoSearch(chatId);
                break;
            case "üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫":
                autoSearchService.handleDisableAutoSearch(chatId);
                break;
            case "30 –º–∏–Ω":
            case "60 –º–∏–Ω":
            case "120 –º–∏–Ω":
                /* –í–°–ï–ì–î–ê –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ö –ö–û–ú–ê–ù–î–£ –ú–ï–ù–Æ*/
                autoSearchService.handleIntervalButton(chatId, text);
                break;
            case "‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
            case "‚ùå –û—Ç–º–µ–Ω–∞":
                /* –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*/
                break;
            case "‚ùå –í—ã–π—Ç–∏":
                authService.handleLogout(chatId);
                break;
            default:
                if (text.startsWith("‚úèÔ∏è –ö–ª—é—á ")) {
                    keywordService.handleEditKeywordCommand(chatId, text);
                } else {
                    telegramService.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }
        }
    }

    /* –î–û–ë–ê–í–ò–¢–¨ –ú–ï–¢–û–î –ü–†–û–í–ï–†–ö–ò –ö–û–ú–ê–ù–î –ú–ï–ù–Æ*/
    private boolean isMenuCommand(String text) {
        return text.equals("üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫") ||
                text.equals("‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞") ||
                text.equals("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º") ||
                text.equals("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É") ||
                text.equals("1 –º–µ—Å—è—Ü - 299‚ÇΩ") ||
                text.equals("12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ") ||
                text.equals("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ") ||
                text.equals("üîô –ù–∞–∑–∞–¥") ||
                text.equals("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") ||
                text.equals("‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("‚ùå –í—ã–π—Ç–∏") ||
                /* –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–ò –ò–ù–¢–ï–†–í–ê–õ–û–í –í –ö–û–ú–ê–ù–î–´ –ú–ï–ù–Æ*/
                text.equals("30 –º–∏–Ω") ||
                text.equals("60 –º–∏–Ω") ||
                text.equals("120 –º–∏–Ω") ||
                text.equals("‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫") ||
                text.equals("‚ùå –û—Ç–º–µ–Ω–∞") ||
                text.equals("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") ||        /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                text.equals("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã") ||         /* ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú*/
                text.startsWith("‚úèÔ∏è –ö–ª—é—á ");
    }

    private void handleCheckPaymentCommand(Long chatId) {
        stateManager.setUserState(chatId, UserStateManager.STATE_WAITING_PAYMENT_ID);
        telegramService.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa:");
    }

    private boolean isUserAuthorized(Long chatId) {
        String state = stateManager.getUserState(chatId);
        User user = userService.findByTelegramChatId(chatId);

        return (UserStateManager.STATE_AUTHORIZED_MAIN.equals(state) ||
                state.startsWith("WAITING_FOR_KEYWORD") ||
                UserStateManager.STATE_AUTO_SEARCH.equals(state) ||
                UserStateManager.STATE_WAITING_INTERVAL.equals(state) ||
                UserStateManager.STATE_AUTHORIZED_KEYWORDS.equals(state) ||
                UserStateManager.STATE_SUBSCRIPTION_MENU.equals(state) ||
                UserStateManager.STATE_SEARCH_IN_PROGRESS.equals(state) ||

                /* –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø –í–í–û–î–ê –ü–û–ò–°–ö–ê:*/
                UserStateManager.STATE_WAITING_SEARCH_QUERY.equals(state) ||
                UserStateManager.STATE_WAITING_SEARCH_CONFIRMATION.equals(state)

                 ) && user != null;
    }

    private boolean isFreeCommand(String text) {
        return List.of(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "1 –º–µ—Å—è—Ü - 299‚ÇΩ", "12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ",
                "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "üîô –ù–∞–∑–∞–¥", "üè† –°—Ç–∞—Ä—Ç",
                "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üîë –í–æ–π—Ç–∏", "‚ùå –í—ã–π—Ç–∏"
        ).contains(text);
    }

    private void sendWelcomeMenu(Long chatId) {
        telegramService.sendMessage(menuFactory.createWelcomeMenu(chatId));
    }

    private void sendMainMenu(Long chatId) {
        telegramService.sendMessage(menuFactory.createMainMenu(chatId));
    }

    private void sendSubscriptionMenu(Long chatId) {
        telegramService.sendMessage(menuFactory.createSubscriptionMenu(chatId));
    }

    @Override
    public void handleError(Update update, Exception exception) {
        log.error("Bot error processing update: {}", exception.getMessage());
        if (update.hasMessage()) {
            telegramService.sendMessage(update.getMessage().getChatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    @Override
    public void shutdown() {
        autoSearchService.shutdown();
        parser.close();
    }

    private void sendInfoMenu(Long chatId) {
        telegramService.sendMessage(menuFactory.createInfoMenu(chatId));
    }

    private void sendContactsMenu(Long chatId) {
        telegramService.sendMessage(menuFactory.createContactsMenu(chatId));
    }

}

