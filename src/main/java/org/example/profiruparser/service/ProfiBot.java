package org.example.profiruparser.service;

import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import org.example.profiruparser.domain.dto.ProfiOrder;
import org.example.profiruparser.domain.dto.SignInRequest;
import org.example.profiruparser.domain.dto.SignUpRequest;
import org.example.profiruparser.domain.model.User;
import org.example.profiruparser.errors.InvalidCredentialsException;
import org.example.profiruparser.errors.LoginException;
import org.example.profiruparser.errors.SearchTimeoutException;
import org.example.profiruparser.errors.SessionExpiredException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import org.telegram.telegrambots.meta.api.methods.BotApiMethod;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.*;

@Component
@RequiredArgsConstructor
public class ProfiBot extends TelegramLongPollingBot {

    @Value("${tg.username}")
    private String username;

    @Value("${tg.token}")
    private String token;

    private final AuthenticationService authenticationService;
    private final UserServiceData userService;
    private final SubscriptionService subscriptionService;
    private final ProfiParser parser = new ProfiParser();
    private final ProfiResponder responder = new ProfiResponder();
    private final ExecutorService executor = Executors.newFixedThreadPool(4);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, Integer> userIntervals = new HashMap<>(); // chatId -> –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final Map<Long, ScheduledFuture<?>> scheduledTasks = new HashMap<>();

    private enum BotState {
        NONE,
        WAITING_FOR_USERNAME,
        WAITING_FOR_PASSWORD,
        AUTHORIZED_MAIN_MENU,
        AUTHORIZED_KEYWORDS_MENU,
        WAITING_FOR_KEYWORD_1,
        WAITING_FOR_KEYWORD_2,
        WAITING_FOR_KEYWORD_3,
        WAITING_FOR_KEYWORD_4,
        WAITING_FOR_KEYWORD_5,
        SEARCH_IN_PROGRESS,
        SUBSCRIPTION_MENU,
        REGISTER_USERNAME,
        REGISTER_PASSWORD,
        WAITING_FOR_INTERVAL,
        AUTO_SEARCH_SETTINGS
    }

    private final Map<Long, BotState> userStates = new HashMap<>();
    private final Map<Long, String> tempUsernames = new HashMap<>();
    private final Map<Long, List<String>> userKeyWords = new HashMap<>();

    @Override
    public String getBotUsername() {
        return username;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasCallbackQuery()) {
                handleCallback(update.getCallbackQuery());
            } else if (update.hasMessage() && update.getMessage().hasText()) {
                handleTextMessage(update.getMessage());
            }
        } catch (Exception e) {
            System.err.println("=== BOT ERROR ===");
            e.printStackTrace();
            if (update.hasMessage()) {
                sendMessage(update.getMessage().getChatId(), "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
        }
    }

    private void handleTextMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        BotState state = userStates.getOrDefault(chatId, BotState.NONE);

        System.out.println("DEBUG handleTextMessage - ChatId: " + chatId + ", Text: " + text + ", State: " + state);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        switch (text) {
            case "/start", "üè† –°—Ç–∞—Ä—Ç":
                handleStartCommand(chatId);
                return;
            case "/register", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                handleRegisterCommand(chatId);
                return;
            case "/login", "üîë –í–æ–π—Ç–∏":
                userStates.put(chatId, BotState.WAITING_FOR_USERNAME);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
                return;
        }

        //  –ò–ó–ú–ï–ù–ò –ü–†–û–í–ï–†–ö–£ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ authorized command
        if (text.startsWith("‚úèÔ∏è –ö–ª—é—á ") && isAuthorized(chatId)) {
            handleAuthorizedCommand(chatId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

        // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–π
        if (handleKeywordState(chatId, state, text)) return;

        // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if (handleIntervalState(chatId, state, text)) return;

        // –ü–û–¢–û–ú –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞
        if (handleRegistrationState(chatId, state, text)) return;
        if (handleLoginState(chatId, state, text)) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (isAuthorized(chatId)) {
            handleAuthorizedCommand(chatId, text);
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: /login");
        }
    }

    private void handleStartCommand(Long chatId) {
        userStates.put(chatId, BotState.NONE);
        tempUsernames.remove(chatId);
        userKeyWords.remove(chatId);

        if (isAuthorized(chatId)) {
            sendMainMenu(chatId);
        } else {
            sendWelcomeMenu(chatId);
        }

        // –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        //sendWelcomeMenu(chatId);
    }

    private void sendWelcomeMenu(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"));
        row1.add(new KeyboardButton("üîë –í–æ–π—Ç–∏"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üè† –°—Ç–∞—Ä—Ç"));

        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private boolean handleRegistrationState(Long chatId, BotState state, String text) {
        switch (state) {
            case REGISTER_USERNAME:
                if (text.length() < 3) {
                    sendMessage(chatId, "‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:");
                    return true;
                }
                if (userService.findUserByUsername(text) != null) {
                    sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:");
                    return true;
                }
                tempUsernames.put(chatId, text);
                userStates.put(chatId, BotState.REGISTER_PASSWORD);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
                return true;

            case REGISTER_PASSWORD:
                String username = tempUsernames.get(chatId);
                SignUpRequest request = new SignUpRequest();
                request.setUsername(username);
                request.setPassword(text);

                if (authenticationService.signUp(request).isPresent()) {
                    sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ: /login");
                    userStates.put(chatId, BotState.NONE);
                } else {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
                }
                return true;
        }
        return false;
    }

    private boolean handleLoginState(Long chatId, BotState state, String text) {
        switch (state) {
            case WAITING_FOR_USERNAME:
                tempUsernames.put(chatId, text);
                userStates.put(chatId, BotState.WAITING_FOR_PASSWORD);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
                return true;

            case WAITING_FOR_PASSWORD:
                String username = tempUsernames.get(chatId);
                SignInRequest request = new SignInRequest();
                request.setUsername(username);
                request.setPassword(text);

                try {
                    Optional<User> user = authenticationService.signIn(request);
                    if (user.isPresent()) {

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –≤ –±–∞–∑–µ
                        userService.updateTelegramChatId(username, chatId);

                        userStates.put(chatId, BotState.AUTHORIZED_MAIN_MENU);
                        sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
                        sendMainMenu(chatId);
                    } else {
                        sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. /login");
                        userStates.put(chatId, BotState.NONE);
                    }
                } catch (InvalidCredentialsException e) {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. /login");
                    userStates.put(chatId, BotState.NONE);
                }
                return true;
        }
        return false;
    }

    private boolean handleKeywordState(Long chatId, BotState state, String text) {
        if (state.name().startsWith("WAITING_FOR_KEYWORD_")) {
            try {
                // üî• –ü–†–û–ü–£–°–¢–ò –í–°–ï –ö–û–ú–ê–ù–î–´ –∏–∑ –º–µ–Ω—é –∫–ª—é—á–µ–π
                Set<String> menuCommands = Set.of(
                        "‚úèÔ∏è –ö–ª—é—á 1", "‚úèÔ∏è –ö–ª—é—á 2", "‚úèÔ∏è –ö–ª—é—á 3", "‚úèÔ∏è –ö–ª—é—á 4", "‚úèÔ∏è –ö–ª—é—á 5",
                        "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
                        "üîô –ù–∞–∑–∞–¥",
                        "üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º"
                );

                if (menuCommands.contains(text)) {
                    return false; // –ü—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ handleAuthorizedCommand
                }

                String stateName = state.name();
                String keyNumStr = stateName.replace("WAITING_FOR_KEYWORD_", "");
                int keyNum = Integer.parseInt(keyNumStr);

                System.out.println("Saving keyword #" + keyNum + ": " + text);

                saveKeyword(chatId, keyNum - 1, text);
                sendMessage(chatId, "‚úÖ –ö–ª—é—á " + keyNum + " —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");
                sendKeywordsMenu(chatId);
                return true;
            } catch (Exception e) {
                System.err.println("Keyword save error: " + e.getMessage());
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞");
                return true;
            }
        }
        return false;
    }

    private void handleAuthorizedCommand(Long chatId, String text) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ chatId –≤–º–µ—Å—Ç–æ tempUsernames
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        // ‚úÖ –ü–†–û–°–¢–û–ô –í–ê–†–ò–ê–ù–¢ - –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é, —Ç–æ —ç—Ç–æ –ø–æ–∏—Å–∫
        if (!isMenuCommand(text)) {
            handleSearch(chatId, text);
            return;
        }

        String username = user.getUsername();
        boolean hasSubscription = subscriptionService.isSubscriptionActive(username);

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏

        // –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        List<String> allowedWithoutSubscription = Arrays.asList(
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "1 –º–µ—Å—è—Ü - 299‚ÇΩ",
                "12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ",
                "üîô –ù–∞–∑–∞–¥",
                "üè† –°—Ç–∞—Ä—Ç",
                "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                "üîë –í–æ–π—Ç–∏",
                "‚ùå –í—ã–π—Ç–∏"
        );

        if (!hasSubscription && !allowedWithoutSubscription.contains(text)) {
            sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            sendSubscriptionMenu(chatId);
            return;

        }

        switch (text) {
            case "üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫":
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:");
                break;

            case "‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
                userStates.put(chatId, BotState.AUTHORIZED_KEYWORDS_MENU);
                sendKeywordsMenu(chatId);
                break;

            case "üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º":
                searchByKeywords(chatId);
                break;

            case "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
                sendSubscriptionMenu(chatId);
                break;

            case "1 –º–µ—Å—è—Ü - 299‚ÇΩ":
                activateSubscription(chatId, 30);
                break;

            case "12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ":
                activateSubscription(chatId, 365);
                break;

            case "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ": // ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
                clearAllKeywords(chatId);
                break;

            case "üîô –ù–∞–∑–∞–¥":
                userStates.put(chatId, BotState.AUTHORIZED_MAIN_MENU);
                sendMainMenu(chatId);
                break;

            case "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
                sendMainMenu(chatId);
                break;

            case "‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫":
                sendAutoSearchMenu(chatId);
                break;

            case "üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫":
                userStates.put(chatId, BotState.WAITING_FOR_INTERVAL);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –¥–ª—è 1 —á–∞—Å–∞):");
                break;

            case "üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫":
                stopAutoSearch(chatId);
                sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
                sendAutoSearchMenu(chatId);
                break;

            case "‚ùå –í—ã–π—Ç–∏":
                userStates.put(chatId, BotState.NONE);
                tempUsernames.remove(chatId);
                sendMessage(chatId, "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ : /start");
                break;

            case "30 –º–∏–Ω":
            case "60 –º–∏–Ω":
            case "120 –º–∏–Ω":
                int interval = Integer.parseInt(text.replace(" –º–∏–Ω", ""));
                userIntervals.put(chatId, interval);
                startAutoSearch(chatId, interval);
                sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ " + interval + " –º–∏–Ω—É—Ç");
                sendAutoSearchMenu(chatId);
                break;

            default:
                if (text.startsWith("‚úèÔ∏è –ö–ª—é—á ")) {
                    handleEditKeyword(chatId, text);
                } else if (userStates.get(chatId) == BotState.AUTHORIZED_MAIN_MENU) {
                    handleSearch(chatId, text);
                } else {
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }
        }
    }

    private void handleEditKeyword(Long chatId, String text) {
        try {
            System.out.println("TEXT: '" + text + "'");
            int keyNum = Integer.parseInt(text.replace("‚úèÔ∏è –ö–ª—é—á ", ""));
            System.out.println("Setting state: WAITING_FOR_KEYWORD_" + keyNum);

            if (keyNum >= 1 && keyNum <= 5) {
                userStates.put(chatId, BotState.valueOf("WAITING_FOR_KEYWORD_" + keyNum));
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ " + keyNum + ":");
            }
        } catch (Exception e) {
            System.err.println("Edit keyword error: " + e.getMessage());
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞");
        }
    }

    private void activateSubscription(Long chatId, int days) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (subscriptionService.activateSubscription(user.getUsername(), days)) {
            LocalDateTime endDate = subscriptionService.getSubscriptionEndDate(user.getUsername());
            sendMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ: " +
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
            sendMainMenu(chatId);
        } else {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
        }
    }

    private void sendMainMenu(Long chatId) {

        User user = userService.findByTelegramChatId(chatId);
        String status = user != null ? getSubscriptionStatus(user.getUsername()) : "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";

        /*String username = tempUsernames.get(chatId);
        String status = getSubscriptionStatus(username);*/

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n" + status + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫"));
        row1.add(new KeyboardButton("‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º"));
        row2.add(new KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫"));
        row3.add(new KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("‚ùå –í—ã–π—Ç–∏"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private String getSubscriptionStatus(String username) {
        if (username == null) return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";

        LocalDateTime endDate = subscriptionService.getSubscriptionEndDate(username);
        if (endDate == null) return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞";

        if (endDate.isAfter(LocalDateTime.now())) {
            return "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: " +
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
        } else {
            return "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: " +
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
        }
    }

    private void sendSubscriptionMenu(Long chatId) {
        userStates.put(chatId, BotState.SUBSCRIPTION_MENU);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üí≥ *–í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏*\n\n‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º\n‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–∏");
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("1 –º–µ—Å—è—Ü - 299‚ÇΩ"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private void sendKeywordsMenu(Long chatId) {
        List<String> keywords = userKeyWords.getOrDefault(chatId, Arrays.asList("", "", "", "", ""));

        StringBuilder text = new StringBuilder("‚öôÔ∏è *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n");
        for (int i = 0; i < 5; i++) {
            text.append(i + 1).append(". ").append(keywords.get(i).isEmpty() ? "–Ω–µ –∑–∞–¥–∞–Ω" : keywords.get(i)).append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text.toString());
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 1"));
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 2"));
        row1.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 3"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 4"));
        row2.add(new KeyboardButton("‚úèÔ∏è –ö–ª—é—á 5"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º"));
        row3.add(new KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"));

        KeyboardRow row4 = new KeyboardRow();
        row4.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private void handleSearch(Long chatId, String query) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –≤–º–µ—Å—Ç–æ tempUsernames
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        executor.submit(() -> {
            try {
                sendMessage(chatId, "üîç –ò–¥–µ—Ç –ø–æ–∏—Å–∫...");

                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                List<ProfiOrder> orders = parser.parseOrders(query);

                if (orders.isEmpty()) {
                    sendMessage(chatId, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + orders.size() + " –∑–∞–∫–∞–∑–æ–≤");
                    orders.forEach(order -> sendOrderCard(chatId, order));
                }
            } catch (Exception e) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
            }
        });
    }

    private void searchByKeywords(Long chatId) {
        User user = userService.findByTelegramChatId(chatId);
        if (user == null) {
            sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.getUsername() –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π username
        if (!subscriptionService.isSubscriptionActive(user.getUsername())) {
            sendMessage(chatId, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!");
            return;
        }

        List<String> keywords = userKeyWords.getOrDefault(chatId, new ArrayList<>())
                .stream().filter(k -> k != null && !k.trim().isEmpty()).toList();

        if (keywords.isEmpty()) {
            sendMessage(chatId, "‚ùå –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
            return;
        }

        executor.submit(() -> {
            try {
                // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–Ω —É–∂–µ –µ—Å—Ç—å
                sendMessage(chatId, "üöÄ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ " + keywords.size() + " –∫–ª—é—á–∞–º...");

                parser.ensureLoggedIn(user.getUsername(), user.getPassword());
                Set<ProfiOrder> allOrders = new LinkedHashSet<>();

                for (String keyword : keywords) {
                    allOrders.addAll(parser.parseOrders(keyword));
                    Thread.sleep(1000);
                }

                if (allOrders.isEmpty()) {
                    sendMessage(chatId, "‚ùå –ü–æ –∫–ª—é—á–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                } else {
                    sendMessage(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ: " + allOrders.size() + " –∑–∞–∫–∞–∑–æ–≤");
                    allOrders.forEach(order -> sendOrderCard(chatId, order));
                }

            } catch (SessionExpiredException e) {
                sendMessage(chatId, "üîê *–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é");
                // –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–ª–æ–≥–∏–Ω
            } catch (SearchTimeoutException e) {
                sendMessage(chatId, "‚è±Ô∏è *–¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞*\n\n–°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç");
            } catch (LoginException e) {
                sendMessage(chatId, "‚ùå *–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞" + e.getMessage());
            } catch (Exception e) {
                sendMessage(chatId, "‚ö†Ô∏è *–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞*\n\n–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
            }
        });
    }

    private void sendOrderCard(Long chatId, ProfiOrder order) {
        String text = String.format(
                "üÜî –ó–∞–∫–∞–∑ #%s\nüìå %s\nüí∞ %s\nüìÖ %s\nüìù %s",
                order.getId(), order.getTitle(), order.getPrice(),order.getCreationTime(),
                order.getDescription().length() > 1000 ?
                        order.getDescription().substring(0, 1000) + "..." : order.getDescription()
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(
                List.of(InlineKeyboardButton.builder()
                        .text("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")
                        .callbackData("respond_" + order.getId())
                        .build())
        ));

        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .replyMarkup(markup)
                .build();

        executeMessage(message);
    }

    private void handleCallback(CallbackQuery callback) {
        String data = callback.getData();
        Long chatId = callback.getMessage().getChatId();

        if (data.startsWith("respond_")) {
            String orderId = data.substring("respond_".length());
            executor.submit(() -> {
                try {
                    boolean success = responder.respondToOrder(orderId, "–•–æ—á—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑!");
                    answerCallback(callback, success ? "‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" : "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
                } catch (Exception e) {
                    answerCallback(callback, "‚ùå –û—à–∏–±–∫–∞");
                }
            });
        }
    }

    private void answerCallback(CallbackQuery callback, String text) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callback.getId());
        answer.setText(text);
        executeMessage(answer);
    }

    private void saveKeyword(Long chatId, int index, String keyword) {
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ 5 –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        List<String> keywords = userKeyWords.getOrDefault(chatId,
                new ArrayList<>(Arrays.asList("", "", "", "", "")));

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª—é—á
        if (index >= 0 && index < keywords.size()) {
            keywords.set(index, keyword);
            userKeyWords.put(chatId, keywords);
            System.out.println("Saved keyword " + (index + 1) + ": " + keyword);
        }
    }

    private boolean isAuthorized(Long chatId) {
        BotState state = userStates.getOrDefault(chatId, BotState.NONE);

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        System.out.println("DEBUG isAuthorized - ChatId: " + chatId + ", State: " + state);

        User user = userService.findByTelegramChatId(chatId);
        boolean hasUserInDb = user != null;

        System.out.println("DEBUG isAuthorized - User in DB: " + hasUserInDb);
        if (user != null) {
            System.out.println("DEBUG isAuthorized - Username: " + user.getUsername());
        }

        boolean isAuth = (state == BotState.AUTHORIZED_MAIN_MENU ||
                state == BotState.AUTHORIZED_KEYWORDS_MENU ||
                state.name().startsWith("WAITING_FOR_KEYWORD") ||
                state == BotState.SEARCH_IN_PROGRESS ||
                state == BotState.SUBSCRIPTION_MENU ||
                state == BotState.AUTO_SEARCH_SETTINGS || // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–û!
                state == BotState.WAITING_FOR_INTERVAL) && hasUserInDb; // ‚Üê –ò –≠–¢–û!

        System.out.println("DEBUG isAuthorized - Result: " + isAuth);
        return isAuth;
    }

    private void handleRegisterCommand(Long chatId) {
        userStates.put(chatId, BotState.REGISTER_USERNAME);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω:");
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        executeMessage(message);
    }

    private void executeMessage(BotApiMethod<?> message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("Error sending message: " + e.getMessage());
        }
    }

    @PreDestroy
    public void shutdown() {
        parser.close();
        executor.shutdown();
        scheduler.shutdown();

        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ scheduled tasks
        scheduledTasks.values().forEach(future -> future.cancel(false));
    }

    private void clearAllKeywords(Long chatId) {
        userKeyWords.put(chatId, Arrays.asList("", "", "", "", ""));
        sendMessage(chatId, "‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã!");
        sendKeywordsMenu(chatId);
    }

    private void sendAutoSearchMenu(Long chatId) {
        userStates.put(chatId, BotState.AUTO_SEARCH_SETTINGS);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
        boolean isAutoSearchRunning = scheduledTasks.containsKey(chatId);
        Integer currentInterval = userIntervals.get(chatId);

        String status;
        if (isAutoSearchRunning && currentInterval != null) {
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω (–∫–∞–∂–¥—ã–µ " + currentInterval + " –º–∏–Ω.)";
        } else {
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω";
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞*\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + status);
        message.setParseMode("Markdown");

        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        if (isAutoSearchRunning) {
            row1.add(new KeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫"));
        } else {
            row1.add(new KeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫"));
        }

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("30 –º–∏–Ω"));
        row2.add(new KeyboardButton("60 –º–∏–Ω"));
        row2.add(new KeyboardButton("120 –º–∏–Ω"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîô –ù–∞–∑–∞–¥"));

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private boolean handleIntervalState(Long chatId, BotState state, String text) {
        if (state == BotState.WAITING_FOR_INTERVAL) {
            try {
                int interval = Integer.parseInt(text);
                if (interval < 5) {
                    sendMessage(chatId, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 5 –º–∏–Ω—É—Ç");
                    return true;
                }
                if (interval > 1440) {
                    sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç)");
                    return true;
                }

                userIntervals.put(chatId, interval);
                startAutoSearch(chatId, interval);
                // –£–±–∏—Ä–∞–µ–º sendMessage –æ—Ç—Å—é–¥–∞ - –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ startAutoSearch
                sendAutoSearchMenu(chatId); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
                return true;

            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö):");
                return true;
            }
        }
        return false;
    }

    private void startAutoSearch(Long chatId, int intervalMinutes) {
        System.out.println("DEBUG startAutoSearch - Starting for chatId: " + chatId + ", interval: " + intervalMinutes);
        stopAutoSearch(chatId);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ chatId
        User user = userService.findByTelegramChatId(chatId);
        if (user == null || !subscriptionService.isSubscriptionActive(user.getUsername())) {
            sendMessage(chatId, "‚ùå –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞");
            return;
        }

        final String username = user.getUsername();

        ScheduledFuture<?> future = scheduler.scheduleAtFixedRate(() -> {
            try {
                if (!subscriptionService.isSubscriptionActive(username)) {
                    sendMessage(chatId, "‚ùå –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞");
                    stopAutoSearch(chatId);
                    return;
                }

                searchByKeywords(chatId);

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–µ: " + e.getMessage());
            }
        }, 0, intervalMinutes, TimeUnit.MINUTES);

        scheduledTasks.put(chatId, future);
        userIntervals.put(chatId, intervalMinutes); // ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª!

        System.out.println("DEBUG startAutoSearch - Scheduled task added for chatId: " + chatId);
        System.out.println("DEBUG startAutoSearch - Scheduled tasks size: " + scheduledTasks.size());

        sendMessage(chatId, "‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ " + intervalMinutes + " –º–∏–Ω—É—Ç");
    }

    private void stopAutoSearch(Long chatId) {
        ScheduledFuture<?> future = scheduledTasks.get(chatId);
        if (future != null) {
            future.cancel(false);
            scheduledTasks.remove(chatId);
        }
        userIntervals.remove(chatId);
    }

    private boolean isMenuCommand(String text) {
        return text.equals("üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫") ||
                text.equals("‚öôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞") ||
                text.equals("üöÄ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º") ||
                text.equals("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É") ||
                text.equals("1 –º–µ—Å—è—Ü - 299‚ÇΩ") ||
                text.equals("12 –º–µ—Å—è—Ü–µ–≤ - 2490‚ÇΩ") ||
                text.equals("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ") ||
                text.equals("üîô –ù–∞–∑–∞–¥") ||
                text.equals("üîÑ –û–±–Ω–æ–≤–∏—Ç—å") ||
                text.equals("‚è∞ –ê–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("üîî –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("üîï –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫") ||
                text.equals("‚ùå –í—ã–π—Ç–∏") ||
                text.equals("30 –º–∏–Ω") ||
                text.equals("60 –º–∏–Ω") ||
                text.equals("120 –º–∏–Ω") ||
                text.startsWith("‚úèÔ∏è –ö–ª—é—á ");
    }

}

